#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>

void do_command(char ***commands, int commands_nr) {
    pid_t pid;
    int pipes[2];

    if(commands_nr == 0){
        exit(1);
    }
    if(commands_nr == 1){
        printf("%s", commands[0][0]);
        execv(commands[0][0], commands[0]);
        exit(1);
    }

    pipe(pipes);

    pid = fork();
    if(pid < 0){
        perror("fork failed!");
        exit(1);
    }

    if(pid == 0) {
        close(pipes[0]);
        dup2(pipes[1], 0);
        do_command(commands + 1, commands_nr - 1);
    }

    close(pipes[1]);
    dup2(pipes[0], 1);
    exit(1);
}

char **get_arguments(char *command) {
    int index=0;
    char *argument;
    char **args = malloc(100 * sizeof(char*));
    args[index] = malloc(sizeof(char*));
    args[0][0] = '\0';

    argument = strtok(command, " ");
    while(argument != NULL){
        args[index] = malloc(sizeof(char*));
        strcpy(args[index], argument);
        index++;
        argument = strtok(NULL, " ");
    }
    args[index] = NULL;
    return args;
}

char ***parse_command(char *command, int *commands_nr){
    char **arguments;
    char ***commands = malloc(sizeof(char***));

    if(strstr(command, "|") == NULL) {
        arguments = get_arguments(command);
        commands[0] = malloc(sizeof(arguments));
        commands[0] = arguments;
        printf("%d", commands_nr);
        commands_nr += 1;
        return commands;
    }
}

int main() {
    int commands_nr=0;
    char *command1[] = {"/bin/cat", "cat", "/home/wok/university/os/project/ash.c"};
    char *command2[] = {"/bin/grep", "int"};
    char *command3[] = {"/bin/grep", "printf"};

    char command[] = {"/bin/cat cat ash.c"};
    char ***commands = parse_command(command, &commands_nr);

    printf("%d", commands_nr);
    do_command(commands, commands_nr);

    return 0;
}
